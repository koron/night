# Night - file filter (grep, head & tail) - server.

## Install

    $ npm install koron/night

       or

    $ npm install -g koron/night


## Tutorial

Start **night** on a server.

    $ night

Then access by HTTP from client.

    $ curl http://127.0.0.1:9280/files/var/log/messages?tail

You will get last 10 lines of /var/log/messages on a server.  When open this
URL using WEB browser, you will see same content, but refresh in each 5
seconds.

    http://127.0.0.1:9280/files/var/log/messages?tail&refresh=5

## Sever Usage

    $ node [OPTIONS]

Where OPTIONS are:

* `-c {FILE}` or `--config=FILE` - server configuration file.
* `-v` or `--verbose` - verbose message (not implemented yet).
* `-h` or `--help` - show help message


## Server configuration file.

Configuration file is JSON format.  All properties are optional.

* `ssl` - Boolean.  Use HTTPS instead of HTTP.  (default: false; not tested)
  * `ssl_key` - String.  Path of private key of the server in PEM format.
  * `ssl_cert` - String.  Path of certificate key of the server in PEM format.
* `port` - Number.  Listen port number.  (default: 9280)
* `prefix` - String.  Prefix of URL to access resources.  (default: "files")
* `locations` - String array.  List of path prefixes of accessible resource.
    Empty means no restriction.  (default: [] (empty))
* `users` - String array.  List of "{USER}:{PASS}" which allowed to access.

Example #1:

```json
{
  "port": 8000,
  "prefix": "night",
  "loactions": [
    "/var/log/",
    "/etc/"
  ],
  "users": [
    "test:1234",
    "root:9999"
  ]
}
```

Example #2: To enable SSL.
```json
{
  "ssl": true,
  "ssl_key": "/path/to/ssl_key",
  "ssl_cert": "/path/to/ssl_cert"
}
```


## Client Usage

Access URL is consisted from these rule.

    http://{host}:{port}/{prefix}{/path/to/source}[?{filters}]

* `host` - host address, IP or host name.
* `port` - port number, configurable see above.
* `prefix` - prefix, configurable see above.
* `/path/to/source` - path of the resource to read, file or directory.
* `filters` - filters spec string, see below. (optional)

### Directory Source

When `/path/to/source` point a directory, you will get lines in this format:

    {filename}\t{type}\t{size}\t{time}

Where `\t` is TAB character, so you can choose by cut filter easily.

* filename - Name of entry.
* type - Type of entry: `file`, `dir`, `error` or `unknown`.
* size - Size of entry, or 0 when type is `error`.
* time - Timestamp of entry in UTC format, or error detail when type is `error`.

Example: get name and size entries in /var/log.

    http://127.0.0.1:9280/files/var/log?cut=list:1,3

### File Source

`*.gz` files are decompressed automatically. 

`*.bz2` files are decompressed automatically when available bzip2 command.

## Filter Spec

Where `{filters}` is:

    {filter}[&{filter}...]

Where `{filter}` is:

    {filter_name}[={options}]

Where `{options}` is:

    {option_name}:{value}[;{option_name}:{value}...]

See other section for detail of each filters.

Example: get last 50 lines except empty lines.

    http://127.0.0.1:9280/files/var/log/messages?grep=re:^$;match:false&tail=limit:50

### Filters

Currenly support these filters:

* Grep filter
* Head filter
* Tail filter
* Cut filter
* Refresh (pseudo) filter

#### Grep filter

Output lines which matches against regular expression.

`grep` command equivalent.

* filter\_name: `grep`
* options
  * `re` - regular expression used for match.
  * `match` - output when match or not match.  default is true.

#### Head filter

Output the first N lines.

`head` command equivalent.

* filter\_name: `head`
* options
  * `start` - start line number for output.  begging 0.  default is 0.
  * `limit` - line number for output.  defualt is 10.

#### Tail filter

Output the last N lines.

`tail` command equivalent.

* filter\_name: `tail`
* options
  * `limit` - line number for output.  defualt is 10.

#### Cut filter

Output selected fields of lines.

`cut` command equivalent.

* filter\_name: `cut`
* options:
  * `delim` - field delimiter string (default: TAB character).
  * `list` - selected fields, combinable by comma `,`.
    * `N` - N'th field counted from 1.
    * `N-M` - from N'th, to M'th field (included).
    * `N-` - from N'th field, to end of line.
    * `N-` - from first, to N'th field.

#### Refresh (pseudo) filter

Add "Refresh" header with specified time (sec).

* filter\_name: `refresh`
* options: interval seconds to refresh.  0 for disable.

Example: Open below URL using WEB browser, it refresh in each 5 seconds
automatically.

    http://127.0.0.1:9280/files/var/log/messages?tail&refresh=5

## Example

### Detect I/O error from /var/log/messages

    $ curl http://127.0.0.1:9280/files/var/log/messages?grep=re:I%27O

### Check whether a program "WATCHDOG" was executed by cron or not.

    $ curl http://127.0.0.1:9280/files/var/log/cron?grep=re:WATCHDOG

### Found errors of HTTP access, limited recent 100 records.

    $ curl http://127.0.0.1:9280/files/var/log/nginx/access.log?grep=re:200,match:false&tail=limit:100
